_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[19],{BtXJ:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return d})),t.d(a,"default",(function(){return p}));var n=t("Fcif"),l=t("dV/x"),o=t("mXGw"),r=t.n(o),s=t("/FXl"),c=t("sQxV"),i=t.n(c),d=(r.a.createElement,{image:"https://images.unsplash.com/photo-1556473062-062e556b0920?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80",title:"Stress-free Continuous Delivery with auto",author:"Andrew Lisowski",email:"lisowski54@gmail.com",date:"Thu, 12 Mar 2020 23:00:02 -0700",layout:"blog",description:"The main command most users use to interact with `auto` is the shipit command. shipit does all the heaving lifting when releasing your code.\n",__resourcePath:"blog/using-shipit.mdx",__scans:{}}),m={frontMatter:d},b=i.a;function p(e){var a=e.components,t=Object(l.a)(e,["components"]);return Object(s.mdx)(b,Object(n.a)({},m,t,{components:a,mdxType:"MDXLayout"}),Object(s.mdx)("p",null,Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," makes releasing your code a breeze. Instead of manually calculating a version and doing your whole release process manually, ",Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," takes care of it for you."),Object(s.mdx)("p",null,"The main command most users use to interact with ",Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," is the shipit command. shipit does all the heaving lifting when releasing your code."),Object(s.mdx)("p",null,"When run on ",Object(s.mdx)("inlineCode",{parentName:"p"},"baseBranch")," it will:"),Object(s.mdx)("ol",null,Object(s.mdx)("li",{parentName:"ol"},"Determine if the last merged PR needs to be released"),Object(s.mdx)("li",{parentName:"ol"},"Update a CHANGELOG.md with all you new changes"),Object(s.mdx)("li",{parentName:"ol"},"Publish to NPM"),Object(s.mdx)("li",{parentName:"ol"},"Make a release on GitHub and mark it as latest")),Object(s.mdx)("p",null,"When run from a PR or locally it will create a canary version."),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"how-does-it-work"},Object(s.mdx)("a",Object(n.a)({parentName:"h2"},{className:'header-link no-underline text-gray-900" hover:underline',href:"#how-does-it-work"}),"How does it\xa0work?")),Object(s.mdx)("p",null,Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," does all this magic through GitHub labels. This makes managing outside contribution super easy. Contributors code, you determine the appropriate label, and ",Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," takes care of the rest."),Object(s.mdx)("p",null,"There are a few types of labels:"),Object(s.mdx)("ol",null,Object(s.mdx)("li",{parentName:"ol"},"Release Labels"),Object(s.mdx)("li",{parentName:"ol"},"Changelog Labels"),Object(s.mdx)("li",{parentName:"ol"},"Arbitrary labels")),Object(s.mdx)("hr",null),Object(s.mdx)("h3",{id:"release-labels"},Object(s.mdx)("a",Object(n.a)({parentName:"h3"},{className:'header-link no-underline text-gray-900" hover:underline',href:"#release-labels"}),"Release Labels")),Object(s.mdx)("p",null,"These labels will help you release semantically versioned packages. If no label is present ",Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," assumes the PR is a patch."),Object(s.mdx)("ul",null,Object(s.mdx)("li",{parentName:"ul"},"major: The PR changes the public API in some way. Create a major release"),Object(s.mdx)("li",{parentName:"ul"},"minor: The PR adds a feature to the public API. Create a minor release"),Object(s.mdx)("li",{parentName:"ul"},"patch: The PR fixes a bug. Create a patch release"),Object(s.mdx)("li",{parentName:"ul"},"skip-release: The PR should not be released. This labels can be used in conjunction with the previous labels for when the PR is actually released"),Object(s.mdx)("li",{parentName:"ul"},"internal: Changes only effect how the app is structured or something that doesn't effect the user. This counts as a patch release")),Object(s.mdx)("h3",{id:"changelog-labels"},Object(s.mdx)("a",Object(n.a)({parentName:"h3"},{className:'header-link no-underline text-gray-900" hover:underline',href:"#changelog-labels"}),"Changelog Labels")),Object(s.mdx)("p",null,"These labels can be used to make your changelogs more expressive. Add them to PRs with release labels to override what changelog section the changes display in. Or use them on their own to just create a patch release."),Object(s.mdx)("p",null,"You can configure more changelog sections, read more here."),Object(s.mdx)("h3",{id:"arbitrary-labels"},Object(s.mdx)("a",Object(n.a)({parentName:"h3"},{className:'header-link no-underline text-gray-900" hover:underline',href:"#arbitrary-labels"}),"Arbitrary labels")),Object(s.mdx)("p",null,Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," doesn't use any extra labels, but you can use whatever labels to power more ",Object(s.mdx)("inlineCode",{parentName:"p"},"auto"),"mated workflows with ",Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," label. This command will return the labels for a PR. Using that information you can choose to run extra CI jobs."),Object(s.mdx)("p",null,"For example,. the following will only run the test:visual script when the PR has has the Visual label."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash syntax-light",style:{background:"#fff"}}),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#D73A49"}}),"export"),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#24292E"}})," PATH="),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#032F62"}}),"$(npm bin)"),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#24292E"}}),":$PATH"),"\n","\n",Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#D73A49"}}),"if"),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#24292E"}})," auto label --pr $PR_NUMBER --exists Visual"),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#D73A49"}}),";"),"\n",Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#D73A49"}}),"then"),"\n",Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#24292E"}}),"    npm run test:visual"),"\n",Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#D73A49"}}),"fi"),"\n"),Object(s.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash syntax-light syntax-dark",style:{background:"#24292e"}}),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#F97583"}}),"export"),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#E1E4E8"}})," PATH="),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#9ECBFF"}}),"$(npm bin)"),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#E1E4E8"}}),":$PATH"),"\n","\n",Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#F97583"}}),"if"),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#E1E4E8"}})," auto label --pr $PR_NUMBER --exists Visual"),Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#F97583"}}),";"),"\n",Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#F97583"}}),"then"),"\n",Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#E1E4E8"}}),"    npm run test:visual"),"\n",Object(s.mdx)("span",Object(n.a)({parentName:"code"},{style:{color:"#F97583"}}),"fi"),"\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"wrapping-up"},Object(s.mdx)("a",Object(n.a)({parentName:"h2"},{className:'header-link no-underline text-gray-900" hover:underline',href:"#wrapping-up"}),"Wrapping Up")),Object(s.mdx)("p",null,"Now that you know all of the above, you have all you need to release every build as the correct version. No longer worry what tag to publish to or what version. You should never really have to run ",Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," yourself, the CI will do that on each build!"),Object(s.mdx)("p",null,"All you have to know is what the labels are and when to use them."),Object(s.mdx)("p",null,"If you have any questions about how to use ",Object(s.mdx)("inlineCode",{parentName:"p"},"auto")," feel free to ask! I hope you guys enjoy the automated release process! \ud83c\udf81"))}p.isMDXComponent=!0},WHjF:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/using-shipit",function(){return t("BtXJ")}])}},[["WHjF",0,1,2,3,5]]]);